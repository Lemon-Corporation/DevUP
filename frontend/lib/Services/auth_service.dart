import 'package:dio/dio.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../Data/models.dart';
import '../Constants/app_config.dart';

class AuthService {
  late Dio _dio;
  
  AuthService() {
    if (!AppConfig.MOCK_MODE) {
      _dio = Dio(BaseOptions(
        baseUrl: AppConfig.backendUrl,
        connectTimeout: AppConfig.connectTimeout,
        receiveTimeout: AppConfig.receiveTimeout,
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
      ));
      
      // –î–æ–±–∞–≤–ª—è–µ–º interceptor –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
      _dio.interceptors.add(LogInterceptor(
        requestBody: true,
        responseBody: true,
        logPrint: (obj) => print(obj),
      ));
    }
  }

  // –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
  Future<JwtResponse> login(String email, String password) async {
    if (AppConfig.MOCK_MODE) {
      // –ú–æ–∫-—Ä–µ–∂–∏–º: —Å–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
      if (AppConfig.DEBUG_MODE) {
        print('üîß MOCK MODE: Simulating login for $email');
      }
      await Future.delayed(Duration(milliseconds: 500)); // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏
      
      final mockResponse = JwtResponse(
        accessToken: 'mock_access_token_${DateTime.now().millisecondsSinceEpoch}',
        refreshToken: 'mock_refresh_token_${DateTime.now().millisecondsSinceEpoch}',
        type: 'Bearer',
        expiresIn: 3600,
      );
      
      await _saveTokens(mockResponse);
      return mockResponse;
    }
    
    // –†–µ–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º —Å –±—ç–∫–µ–Ω–¥–æ–º
    try {
      final authRequest = AuthRequest(
        username: email,
        password: password,
      );

      final response = await _dio.post(
        AppConfig.authLoginEndpoint,
        data: authRequest.toJson(),
      );

      if (response.statusCode == 200) {
        final jwtResponse = JwtResponse.fromJson(response.data);
        await _saveTokens(jwtResponse);
        return jwtResponse;
      } else {
        throw ApiError(
          message: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
          statusCode: response.statusCode,
        );
      }
    } on DioException catch (e) {
      if (e.response?.statusCode == 401) {
        throw ApiError(message: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
      } else if (e.response?.statusCode == 400) {
        throw ApiError(message: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞');
      } else {
        throw ApiError(message: '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É');
      }
    } catch (e) {
      throw ApiError(message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞');
    }
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
  Future<void> register(String username, String email, String password) async {
    if (AppConfig.MOCK_MODE) {
      // –ú–æ–∫-—Ä–µ–∂–∏–º: —Å–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
      if (AppConfig.DEBUG_MODE) {
        print('üîß MOCK MODE: Simulating registration for $email');
      }
      await Future.delayed(Duration(milliseconds: 500)); // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏
      return; // –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    }
    
    // –†–µ–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º —Å –±—ç–∫–µ–Ω–¥–æ–º
    try {
      final registerRequest = RegisterRequest(
        username: username,
        email: email,
        password: password,
      );

      final response = await _dio.post(
        AppConfig.userCreateEndpoint,
        data: registerRequest.toJson(),
      );

      if (response.statusCode != 200) {
        throw ApiError(
          message: '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
          statusCode: response.statusCode,
        );
      }
    } on DioException catch (e) {
      if (e.response?.statusCode == 400) {
        throw ApiError(message: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
      } else if (e.response?.statusCode == 409) {
        throw ApiError(message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      } else {
        throw ApiError(message: '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É');
      }
    } catch (e) {
      throw ApiError(message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞');
    }
  }

  // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  Future<void> logout() async {
    if (AppConfig.MOCK_MODE) {
      // –ú–æ–∫-—Ä–µ–∂–∏–º: –ø—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã
      if (AppConfig.DEBUG_MODE) {
        print('üîß MOCK MODE: Simulating logout');
      }
      await _clearTokens();
      return;
    }
    
    // –†–µ–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º —Å –±—ç–∫–µ–Ω–¥–æ–º
    try {
      final refreshToken = await getRefreshToken();
      if (refreshToken != null) {
        await _dio.post(
          AppConfig.authLogoutEndpoint,
          data: {'refreshToken': refreshToken},
        );
      }
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ: $e');
    } finally {
      await _clearTokens();
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
  Future<void> _saveTokens(JwtResponse jwtResponse) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString('access_token', jwtResponse.accessToken);
    await prefs.setString('refresh_token', jwtResponse.refreshToken);
    await prefs.setBool('is_logged_in', true);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ access —Ç–æ–∫–µ–Ω–∞
  Future<String?> getAccessToken() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getString('access_token');
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ refresh —Ç–æ–∫–µ–Ω–∞
  Future<String?> getRefreshToken() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getString('refresh_token');
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  Future<bool> isLoggedIn() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getBool('is_logged_in') ?? false;
  }

  // –û—á–∏—Å—Ç–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
  Future<void> _clearTokens() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove('access_token');
    await prefs.remove('refresh_token');
    await prefs.setBool('is_logged_in', false);
  }
} 