import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:devup/Values/values.dart';
import 'package:speech_to_text/speech_to_text.dart' as stt;

class AIInterviewScreen extends StatefulWidget {
  @override
  _AIInterviewScreenState createState() => _AIInterviewScreenState();
}

class _AIInterviewScreenState extends State<AIInterviewScreen> {
  final TextEditingController _answerController = TextEditingController();
  final stt.SpeechToText _speech = stt.SpeechToText();
  bool _isRecording = false;
  int _currentQuestionIndex = 0;
  
  final List<String> _questions = [
    "–û–±—ä—è—Å–Ω–∏—Ç–µ —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –æ–±—É—á–µ–Ω–∏–µ–º —Å —É—á–∏—Ç–µ–ª–µ–º –∏ –æ–±—É—á–µ–Ω–∏–µ–º –±–µ–∑ —É—á–∏—Ç–µ–ª—è.",
    "–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å –º–µ–∂–¥—É —Å–º–µ—â–µ–Ω–∏–µ–º –∏ –¥–∏—Å–ø–µ—Ä—Å–∏–µ–π?",
    "–û–±—ä—è—Å–Ω–∏—Ç–µ, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –¥–µ—Ä–µ–≤—å—è —Ä–µ—à–µ–Ω–∏–π.",
    "–ß—Ç–æ —Ç–∞–∫–æ–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Å–ø—É—Å–∫ –∏ –∫–∞–∫ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç?",
    "–û–±—ä—è—Å–Ω–∏—Ç–µ –ø–æ–Ω—è—Ç–∏–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –∏ –∫–∞–∫ –µ–≥–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å.",
    "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ –∏ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏.",
    "–ö–∞–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –≤—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª–∏ –∏ –∫–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏?",
    "–ö–∞–∫ –≤—ã –ø–æ–¥—Ö–æ–¥–∏—Ç–µ –∫ —Ä–µ—à–µ–Ω–∏—é —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á?",
    "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–º–∞–Ω–¥–µ.",
    "–ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –∏–∑—É—á–∏—Ç—å –≤ –±—É–¥—É—â–µ–º?",
  ];

  @override
  void initState() {
    super.initState();
    _initSpeech();
    _answerController.addListener(() {
      setState(() {});
    });
  }

  void _initSpeech() async {
    try {
      bool available = await _speech.initialize(
        onError: (error) {
          print("üîß DEBUG: Speech recognition error: $error");
          setState(() {
            _isRecording = false;
          });
        },
        onStatus: (status) {
          print("üîß DEBUG: Speech recognition status: $status");
        },
      );
      
      if (!available) {
        print("üîß DEBUG: Speech recognition not available");
        // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        Get.snackbar(
          "–í–Ω–∏–º–∞–Ω–∏–µ",
          "–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ —ç—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ",
          snackPosition: SnackPosition.BOTTOM,
          backgroundColor: AppColors.warning ?? Colors.orange,
          colorText: Colors.white,
        );
      }
    } catch (e) {
      print("üîß DEBUG: Error initializing speech: $e");
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    }
  }

  void _startListening() async {
    try {
      if (!_isRecording && _speech.isAvailable) {
        setState(() {
          _isRecording = true;
        });
        await _speech.listen(
          onResult: (result) {
            setState(() {
              _answerController.text = result.recognizedWords;
            });
          },
          listenFor: Duration(seconds: 30),
          pauseFor: Duration(seconds: 3),
          partialResults: true,
          localeId: "ru_RU",
          onSoundLevelChange: (level) {
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—É—é –∏–Ω–¥–∏–∫–∞—Ü–∏—é —É—Ä–æ–≤–Ω—è –∑–≤—É–∫–∞
          },
        );
      } else if (!_speech.isAvailable) {
        Get.snackbar(
          "–û—à–∏–±–∫–∞",
          "–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
          snackPosition: SnackPosition.BOTTOM,
          backgroundColor: AppColors.error ?? Colors.red,
          colorText: Colors.white,
        );
      }
    } catch (e) {
      print("üîß DEBUG: Error starting listening: $e");
      setState(() {
        _isRecording = false;
      });
      Get.snackbar(
        "–û—à–∏–±–∫–∞",
        "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏",
        snackPosition: SnackPosition.BOTTOM,
        backgroundColor: AppColors.error ?? Colors.red,
        colorText: Colors.white,
      );
    }
  }

  void _stopListening() async {
    try {
      if (_isRecording) {
        await _speech.stop();
        setState(() {
          _isRecording = false;
        });
      }
    } catch (e) {
      print("üîß DEBUG: Error stopping listening: $e");
      setState(() {
        _isRecording = false;
      });
    }
  }

  void _sendAnswer() {
    if (_answerController.text.trim().isNotEmpty) {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
      Get.snackbar(
        "–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
        "–í–∞—à –æ—Ç–≤–µ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
        snackPosition: SnackPosition.BOTTOM,
        backgroundColor: AppColors.success,
        colorText: Colors.white,
      );
      
      // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
      if (_currentQuestionIndex < _questions.length - 1) {
        setState(() {
          _currentQuestionIndex++;
          _answerController.clear();
        });
      } else {
        // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é
        _finishInterview();
      }
    }
  }

  void _finishInterview() {
    Get.dialog(
      Dialog(
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(20),
        ),
        child: Container(
          padding: EdgeInsets.all(20),
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.circular(20),
          ),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Icon(
                Icons.check_circle,
                color: AppColors.success,
                size: 60,
              ),
              SizedBox(height: 20),
              Text(
                "–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!",
                style: TextStyle(
                  fontFamily: 'Unbounded',
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: AppColors.textPrimary,
                ),
              ),
              SizedBox(height: 10),
              Text(
                "–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ AI —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏",
                textAlign: TextAlign.center,
                style: GoogleFonts.firaCode(
                  fontSize: 14,
                  color: AppColors.textSecondary,
                ),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  Get.back();
                  Get.back();
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: AppColors.primary,
                  foregroundColor: Colors.white,
                  padding: EdgeInsets.symmetric(horizontal: 30, vertical: 15),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                ),
                child: Text(
                  "–ó–∞–∫—Ä—ã—Ç—å",
                  style: GoogleFonts.firaCode(
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      body: SafeArea(
        child: Column(
          children: [
            _buildAppBar(),
            Expanded(
              child: Padding(
                padding: EdgeInsets.all(20),
                child: Column(
                  children: [
                    SizedBox(height: 20),
                    _buildAIAvatar(),
                    SizedBox(height: 30),
                    _buildQuestionCard(),
                    SizedBox(height: 30),
                    _buildAnswerField(),
                    SizedBox(height: 20),
                    _buildActionButtons(),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildAppBar() {
    return Container(
      padding: EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white,
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 5,
            offset: Offset(0, 2),
          ),
        ],
      ),
      child: Row(
        children: [
          GestureDetector(
            onTap: () => Get.back(),
            child: Icon(
              Icons.arrow_back,
              color: AppColors.primary,
              size: 24,
            ),
          ),
          SizedBox(width: 12),
          Container(
            width: 36,
            height: 36,
            decoration: BoxDecoration(
              gradient: LinearGradient(
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
                colors: [
                  Color(0xFF4A90E2),
                  Color(0xFF50E3C2),
                ],
              ),
              shape: BoxShape.circle,
            ),
            child: Center(
              child: Text(
                "ü§ñ",
                style: TextStyle(fontSize: 18),
              ),
            ),
          ),
          SizedBox(width: 12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  "AI –°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ",
                  style: GoogleFonts.firaCode(
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                    color: AppColors.textPrimary,
                  ),
                  overflow: TextOverflow.ellipsis,
                ),
                Text(
                  "–í–æ–ø—Ä–æ—Å ${_currentQuestionIndex + 1}/${_questions.length}",
                  style: GoogleFonts.firaCode(
                    fontSize: 11,
                    color: AppColors.textSecondary,
                  ),
                ),
              ],
            ),
          ),
          SizedBox(width: 8),
          Container(
            padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
            decoration: BoxDecoration(
              color: Color(0xFFE8E8FF),
              borderRadius: BorderRadius.circular(16),
            ),
            child: Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                Icon(
                  Icons.smart_toy,
                  color: AppColors.primary,
                  size: 14,
                ),
                SizedBox(width: 4),
                Text(
                  "AI",
                  style: GoogleFonts.firaCode(
                    fontSize: 10,
                    fontWeight: FontWeight.bold,
                    color: AppColors.primary,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildAIAvatar() {
    return Container(
      width: 120,
      height: 120,
      decoration: BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: [
            Color(0xFF4A90E2),
            Color(0xFF50E3C2),
            Color(0xFF9B59B6),
          ],
        ),
        shape: BoxShape.circle,
        boxShadow: [
          BoxShadow(
            color: Color(0xFF4A90E2).withOpacity(0.3),
            blurRadius: 20,
            offset: Offset(0, 10),
          ),
        ],
      ),
      child: Stack(
        children: [
          Center(
            child: Text(
              "ü§ñ",
              style: TextStyle(fontSize: 50),
            ),
          ),
          Positioned(
            right: 10,
            top: 10,
            child: Container(
              width: 30,
              height: 30,
              decoration: BoxDecoration(
                color: Color(0xFF4A90E2),
                shape: BoxShape.circle,
                border: Border.all(color: Colors.white, width: 2),
              ),
              child: Center(
                child: Text(
                  "?",
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildQuestionCard() {
    return Container(
      width: double.infinity,
      padding: EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Color(0xFFE8F4FD),
        borderRadius: BorderRadius.circular(20),
        border: Border.all(
          color: Color(0xFF4A90E2).withOpacity(0.2),
          width: 1,
        ),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Container(
                width: 24,
                height: 24,
                decoration: BoxDecoration(
                  color: Color(0xFF4A90E2),
                  shape: BoxShape.circle,
                ),
                child: Center(
                  child: Text(
                    "${_currentQuestionIndex + 1}",
                    style: GoogleFonts.firaCode(
                      fontSize: 12,
                      fontWeight: FontWeight.bold,
                      color: Colors.white,
                    ),
                  ),
                ),
              ),
              SizedBox(width: 10),
              Text(
                "AI –ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä",
                style: GoogleFonts.firaCode(
                  fontSize: 14,
                  fontWeight: FontWeight.bold,
                  color: Color(0xFF4A90E2),
                ),
              ),
            ],
          ),
          SizedBox(height: 15),
          Text(
            _questions[_currentQuestionIndex],
            style: GoogleFonts.firaCode(
              fontSize: 16,
              color: AppColors.textPrimary,
              height: 1.5,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildAnswerField() {
    return Expanded(
      child: Container(
        width: double.infinity,
        padding: EdgeInsets.all(20),
        decoration: BoxDecoration(
          color: Color(0xFFF8F9FA),
          borderRadius: BorderRadius.circular(15),
          border: Border.all(
            color: Colors.grey.withOpacity(0.3),
            width: 1,
          ),
        ),
        child: TextField(
          controller: _answerController,
          maxLines: null,
          expands: true,
          textAlignVertical: TextAlignVertical.top,
          style: GoogleFonts.firaCode(
            fontSize: 16,
            color: AppColors.textPrimary,
          ),
          decoration: InputDecoration(
            hintText: '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –∑–¥–µ—Å—å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç...',
            hintStyle: GoogleFonts.firaCode(
              fontSize: 16,
              color: Colors.grey,
            ),
            border: InputBorder.none,
          ),
        ),
      ),
    );
  }

  Widget _buildActionButtons() {
    return Row(
      children: [
        Expanded(
          child: ElevatedButton.icon(
            onPressed: _isRecording ? _stopListening : _startListening,
            icon: Icon(
              _isRecording ? Icons.stop : Icons.mic,
              color: Colors.white,
            ),
            label: Text(
              _isRecording ? '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å' : '–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥',
              style: GoogleFonts.firaCode(
                fontSize: 16,
                fontWeight: FontWeight.bold,
                color: Colors.white,
              ),
            ),
            style: ElevatedButton.styleFrom(
              backgroundColor: Color(0xFF00C9B1),
              foregroundColor: Colors.white,
              padding: EdgeInsets.symmetric(vertical: 16),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12),
              ),
              elevation: 0,
            ),
          ),
        ),
        SizedBox(width: 15),
        Expanded(
          child: ElevatedButton.icon(
            onPressed: _answerController.text.trim().isEmpty ? null : _sendAnswer,
            icon: Icon(
              Icons.send,
              color: _answerController.text.trim().isEmpty ? Colors.grey : Colors.white,
            ),
            label: Text(
              '–û—Ç–ø—Ä–∞–≤–∏—Ç—å',
              style: GoogleFonts.firaCode(
                fontSize: 16,
                fontWeight: FontWeight.bold,
                color: _answerController.text.trim().isEmpty ? Colors.grey : Colors.white,
              ),
            ),
            style: ElevatedButton.styleFrom(
              backgroundColor: _answerController.text.trim().isEmpty 
                  ? Color(0xFFE0E0E0)
                  : Color(0xFF9E9E9E),
              foregroundColor: Colors.white,
              padding: EdgeInsets.symmetric(vertical: 16),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12),
              ),
              elevation: 0,
            ),
          ),
        ),
      ],
    );
  }

  @override
  void dispose() {
    _answerController.dispose();
    if (_isRecording) {
      _speech.stop();
    }
    super.dispose();
  }
} 